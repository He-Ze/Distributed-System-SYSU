# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_pb2 as grpc__pb2


class PubsubStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.publish = channel.unary_unary(
                '/Pubsub/publish',
                request_serializer=grpc__pb2.publishRequest.SerializeToString,
                response_deserializer=grpc__pb2.reply.FromString,
                )
        self.browse = channel.unary_stream(
                '/Pubsub/browse',
                request_serializer=grpc__pb2.browseRequest.SerializeToString,
                response_deserializer=grpc__pb2.reply.FromString,
                )
        self.subcribe = channel.unary_stream(
                '/Pubsub/subcribe',
                request_serializer=grpc__pb2.subRequest.SerializeToString,
                response_deserializer=grpc__pb2.reply.FromString,
                )


class PubsubServicer(object):
    """Missing associated documentation comment in .proto file."""

    def publish(self, request, context):
        """发布主题消息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def browse(self, request, context):
        """浏览主题
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subcribe(self, request, context):
        """订阅主题
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PubsubServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'publish': grpc.unary_unary_rpc_method_handler(
                    servicer.publish,
                    request_deserializer=grpc__pb2.publishRequest.FromString,
                    response_serializer=grpc__pb2.reply.SerializeToString,
            ),
            'browse': grpc.unary_stream_rpc_method_handler(
                    servicer.browse,
                    request_deserializer=grpc__pb2.browseRequest.FromString,
                    response_serializer=grpc__pb2.reply.SerializeToString,
            ),
            'subcribe': grpc.unary_stream_rpc_method_handler(
                    servicer.subcribe,
                    request_deserializer=grpc__pb2.subRequest.FromString,
                    response_serializer=grpc__pb2.reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Pubsub', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Pubsub(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Pubsub/publish',
            grpc__pb2.publishRequest.SerializeToString,
            grpc__pb2.reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def browse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Pubsub/browse',
            grpc__pb2.browseRequest.SerializeToString,
            grpc__pb2.reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subcribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Pubsub/subcribe',
            grpc__pb2.subRequest.SerializeToString,
            grpc__pb2.reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
